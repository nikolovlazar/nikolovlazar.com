---
import { CollectionEntry, getCollection } from 'astro:content'
import type { GetStaticPaths, Page } from 'astro'

import Post from '@/components/post.astro'
import MainLayout from '@/layouts/main.astro'
import Tags from '@/components/tags.astro'
import { POSTS_PER_PAGE } from '../../../constants'

type EnhancedPost = CollectionEntry<'blog'> & {
  readingTime: number
}

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const posts = await getCollection('blog')

  const tags = Array.from(new Set(posts.flatMap((post) => post.data.tags)))
  tags.push('all')

  return tags.flatMap((tag) => {
    const filteredPosts = (
      tag === 'all'
        ? posts
        : posts.filter((post) => post.data.tags.includes(tag))
    ).sort((a, b) => b.data.date.getTime() - a.data.date.getTime())

    return paginate(filteredPosts, {
      params: { tag },
      props: { tags },
      pageSize: POSTS_PER_PAGE,
    })
  })
}

const page: Page = Astro.props.page
const tags = Astro.props.tags
const params = Astro.params
const posts = page.data as EnhancedPost[]
---

<MainLayout
  title='Blog'
  desc={`${params.tag.replace('-', ' ')} articles written by Lazar Nikolov`}
>
  <Tags tags={tags} selected={params.tag} urlPattern='/blog/{t}/1' />

  <ul class='posts'>
    {
      posts.map((post) => (
        <li>
          <Post post={post} />
        </li>
      ))
    }
  </ul>

  {
    page.lastPage > 1 && (
      <ul class='pagination'>
        {Array.from(Array(page.lastPage).keys())
          .map((k) => k + 1)
          .map((p) =>
            p === page.currentPage ? (
              <li>
                <span class='pagination--item active'>{p}</span>
              </li>
            ) : (
              <li>
                <a class='pagination--item' href={`/blog/${params.tag}/${p}`}>
                  {p}
                </a>
              </li>
            ),
          )}
      </ul>
    )
  }
</MainLayout>

<style>
  .posts {
    margin-top: 88px;
  }

  .posts li:not(:last-child) {
    margin-bottom: 24px;
  }

  .pagination {
    margin-top: 40px;
    display: flex;
  }

  .pagination--item {
    padding: 4px 14px;
    color: var(--colors-foreground);
    font-size: var(--fontSizes-2xl);
    position: relative;
  }

  .pagination--item.active {
    color: var(--colors-background);
    background: var(--colors-foreground);
  }
</style>
